// Code generated by MockGen. DO NOT EDIT.
// Source: internal/profiles/pg_repository.go

// Package mock_profiles is a generated GoMock package.
package mock_profiles

import (
	models "cyansnbrst/profiles-service/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method.
func (m *MockRepository) CreateProfile(uid, name, defaultLocation string, defaultInterests []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", uid, name, defaultLocation, defaultInterests)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockRepositoryMockRecorder) CreateProfile(uid, name, defaultLocation, defaultInterests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockRepository)(nil).CreateProfile), uid, name, defaultLocation, defaultInterests)
}

// Get mocks base method.
func (m *MockRepository) Get(uid string) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", uid)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), uid)
}

// Update mocks base method.
func (m *MockRepository) Update(arg0 *models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), arg0)
}
