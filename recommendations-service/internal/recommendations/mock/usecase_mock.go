// Code generated by MockGen. DO NOT EDIT.
// Source: internal/recommendations/usecase.go

// Package mock_recommendations is a generated GoMock package.
package mock_recommendations

import (
	models "cyansnbrst/recommendations-service/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// DeleteProduct mocks base method.
func (m *MockUseCase) DeleteProduct(productID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockUseCaseMockRecorder) DeleteProduct(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockUseCase)(nil).DeleteProduct), productID)
}

// GenerateRecommendationsForUser mocks base method.
func (m *MockUseCase) GenerateRecommendationsForUser(userUID string, newInterests []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRecommendationsForUser", userUID, newInterests)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateRecommendationsForUser indicates an expected call of GenerateRecommendationsForUser.
func (mr *MockUseCaseMockRecorder) GenerateRecommendationsForUser(userUID, newInterests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRecommendationsForUser", reflect.TypeOf((*MockUseCase)(nil).GenerateRecommendationsForUser), userUID, newInterests)
}

// GetRecommendationsForUser mocks base method.
func (m *MockUseCase) GetRecommendationsForUser(userUID string) ([]models.Recommendation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendationsForUser", userUID)
	ret0, _ := ret[0].([]models.Recommendation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendationsForUser indicates an expected call of GetRecommendationsForUser.
func (mr *MockUseCaseMockRecorder) GetRecommendationsForUser(userUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationsForUser", reflect.TypeOf((*MockUseCase)(nil).GetRecommendationsForUser), userUID)
}

// IncrementPopularity mocks base method.
func (m *MockUseCase) IncrementPopularity(productID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementPopularity", productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementPopularity indicates an expected call of IncrementPopularity.
func (mr *MockUseCaseMockRecorder) IncrementPopularity(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementPopularity", reflect.TypeOf((*MockUseCase)(nil).IncrementPopularity), productID)
}

// InsertProduct mocks base method.
func (m *MockUseCase) InsertProduct(productID int64, tags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProduct", productID, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProduct indicates an expected call of InsertProduct.
func (mr *MockUseCaseMockRecorder) InsertProduct(productID, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProduct", reflect.TypeOf((*MockUseCase)(nil).InsertProduct), productID, tags)
}

// UpdateRecommendationsForProduct mocks base method.
func (m *MockUseCase) UpdateRecommendationsForProduct(productID int64, newTags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecommendationsForProduct", productID, newTags)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecommendationsForProduct indicates an expected call of UpdateRecommendationsForProduct.
func (mr *MockUseCaseMockRecorder) UpdateRecommendationsForProduct(productID, newTags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecommendationsForProduct", reflect.TypeOf((*MockUseCase)(nil).UpdateRecommendationsForProduct), productID, newTags)
}
