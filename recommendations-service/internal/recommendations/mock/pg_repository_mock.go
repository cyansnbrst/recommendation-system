// Code generated by MockGen. DO NOT EDIT.
// Source: internal/recommendations/pg_repository.go

// Package mock_recommendations is a generated GoMock package.
package mock_recommendations

import (
	models "cyansnbrst/recommendations-service/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateRecommendation mocks base method.
func (m *MockRepository) CreateRecommendation(user_uid string, product_id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecommendation", user_uid, product_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRecommendation indicates an expected call of CreateRecommendation.
func (mr *MockRepositoryMockRecorder) CreateRecommendation(user_uid, product_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecommendation", reflect.TypeOf((*MockRepository)(nil).CreateRecommendation), user_uid, product_id)
}

// DeleteProduct mocks base method.
func (m *MockRepository) DeleteProduct(productID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockRepositoryMockRecorder) DeleteProduct(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockRepository)(nil).DeleteProduct), productID)
}

// DeleteRecommendationsForProduct mocks base method.
func (m *MockRepository) DeleteRecommendationsForProduct(productID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecommendationsForProduct", productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecommendationsForProduct indicates an expected call of DeleteRecommendationsForProduct.
func (mr *MockRepositoryMockRecorder) DeleteRecommendationsForProduct(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecommendationsForProduct", reflect.TypeOf((*MockRepository)(nil).DeleteRecommendationsForProduct), productID)
}

// DeleteRecommendationsForUser mocks base method.
func (m *MockRepository) DeleteRecommendationsForUser(userUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecommendationsForUser", userUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecommendationsForUser indicates an expected call of DeleteRecommendationsForUser.
func (mr *MockRepositoryMockRecorder) DeleteRecommendationsForUser(userUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecommendationsForUser", reflect.TypeOf((*MockRepository)(nil).DeleteRecommendationsForUser), userUID)
}

// FindProductsByTags mocks base method.
func (m *MockRepository) FindProductsByTags(tag string) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductsByTags", tag)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductsByTags indicates an expected call of FindProductsByTags.
func (mr *MockRepositoryMockRecorder) FindProductsByTags(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductsByTags", reflect.TypeOf((*MockRepository)(nil).FindProductsByTags), tag)
}

// GetAllUsers mocks base method.
func (m *MockRepository) GetAllUsers() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockRepositoryMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockRepository)(nil).GetAllUsers))
}

// GetRecommendationsByUser mocks base method.
func (m *MockRepository) GetRecommendationsByUser(user_uid string) ([]models.Recommendation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendationsByUser", user_uid)
	ret0, _ := ret[0].([]models.Recommendation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendationsByUser indicates an expected call of GetRecommendationsByUser.
func (mr *MockRepositoryMockRecorder) GetRecommendationsByUser(user_uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationsByUser", reflect.TypeOf((*MockRepository)(nil).GetRecommendationsByUser), user_uid)
}

// GetUserInterests mocks base method.
func (m *MockRepository) GetUserInterests(userUID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInterests", userUID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInterests indicates an expected call of GetUserInterests.
func (mr *MockRepositoryMockRecorder) GetUserInterests(userUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInterests", reflect.TypeOf((*MockRepository)(nil).GetUserInterests), userUID)
}

// IncrementPopularity mocks base method.
func (m *MockRepository) IncrementPopularity(product_id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementPopularity", product_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementPopularity indicates an expected call of IncrementPopularity.
func (mr *MockRepositoryMockRecorder) IncrementPopularity(product_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementPopularity", reflect.TypeOf((*MockRepository)(nil).IncrementPopularity), product_id)
}

// InsertProduct mocks base method.
func (m *MockRepository) InsertProduct(product_id int64, tags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProduct", product_id, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProduct indicates an expected call of InsertProduct.
func (mr *MockRepositoryMockRecorder) InsertProduct(product_id, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProduct", reflect.TypeOf((*MockRepository)(nil).InsertProduct), product_id, tags)
}

// InsertUser mocks base method.
func (m *MockRepository) InsertUser(user_uid string, interests []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", user_uid, interests)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockRepositoryMockRecorder) InsertUser(user_uid, interests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockRepository)(nil).InsertUser), user_uid, interests)
}

// UpdateProductTags mocks base method.
func (m *MockRepository) UpdateProductTags(product_id int64, tags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductTags", product_id, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductTags indicates an expected call of UpdateProductTags.
func (mr *MockRepositoryMockRecorder) UpdateProductTags(product_id, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductTags", reflect.TypeOf((*MockRepository)(nil).UpdateProductTags), product_id, tags)
}

// UpdateUserInterests mocks base method.
func (m *MockRepository) UpdateUserInterests(user_uid string, interests []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInterests", user_uid, interests)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserInterests indicates an expected call of UpdateUserInterests.
func (mr *MockRepositoryMockRecorder) UpdateUserInterests(user_uid, interests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInterests", reflect.TypeOf((*MockRepository)(nil).UpdateUserInterests), user_uid, interests)
}
